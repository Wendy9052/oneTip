{"remainingRequest":"/Users/wendy/Documents/test_proj/oneTip/onetip/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/wendy/Documents/test_proj/oneTip/onetip/src/view/tips_10.vue?vue&type=style&index=0&id=6efd7175&lang=scss&scoped=true","dependencies":[{"path":"/Users/wendy/Documents/test_proj/oneTip/onetip/src/view/tips_10.vue","mtime":1637113475502},{"path":"/Users/wendy/Documents/test_proj/oneTip/onetip/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wendy/Documents/test_proj/oneTip/onetip/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":499162500000},{"path":"/Users/wendy/Documents/test_proj/oneTip/onetip/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/wendy/Documents/test_proj/oneTip/onetip/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wendy/Documents/test_proj/oneTip/onetip/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wendy/Documents/test_proj/oneTip/onetip/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci50aXBzX3BhZ2V7CiAgLnRpcHNfdGl0bGV7CiAgICBjb2xvcjogI2NjYzsKICAgIG1hcmdpbi1ib3R0b206IDE1cHg7CiAgfQogIC5idG5fYm94IHsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7CiAgfQogIC5lbC1idXR0b24gewogICAgbWFyZ2luLWJvdHRvbTogMTVweDsKICAgIGNvbG9yOiAjY2NjOwogIH0KfQo="},{"version":3,"sources":["/Users/wendy/Documents/test_proj/oneTip/onetip/src/view/tips_10.vue"],"names":[],"mappings":";AA4MA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACT,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACrB;EACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC/B;EACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACb;AACF","file":"/Users/wendy/Documents/test_proj/oneTip/onetip/src/view/tips_10.vue","sourceRoot":"","sourcesContent":["<template>\n  <!--  -->\n  <div class=\"tips_page\">\n    <div class=\"tips_title\">JS优雅的使用技巧～</div>\n    <div class=\"btn_box\">\n      <el-button plain @click=\"addProperty()\">1.使用展开运算符 ... 来有条件的向JS对象添加属性</el-button>\n      <el-button plain @click=\"propertyExist()\">2.检查属性是否存在对象中,可以使用 in 关键字来检查 JavaScript 对象中是否存在某个属性</el-button>\n      <el-button plain @click=\"dynamicProperty()\">3.对象中的动态属性名称,使用动态键设置对象属性很简单。只需使用['key name']来添加属性</el-button>\n      <el-button plain @click=\"dynamicKey()\">4.使用动态键进行对象解构</el-button>\n      <el-button plain @click=\"nullMergeOperator()\">5.空值合并 ?? 操作符</el-button>\n      <el-button plain @click=\"optionalChain()\">6.可选链 ?. </el-button>\n      <el-button plain @click=\"doubleDenial()\">7.使用 !! 操作符（双重否定表肯定）</el-button>\n      <el-button plain @click=\"strAndIntegerConverdsion()\">8.字符串和整数转换</el-button>\n      <el-button plain @click=\"checkFackValue()\">9.检查数组中的假值</el-button>\n      <el-button plain @click=\"flattenArrays()\">10.数组扁平化</el-button>\n      <el-button plain @click=\"Question_1()\">11.if(a==1且a==2且a==3)，有没有可能为true</el-button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n\n    }\n  },\n  moutned() {\n\n  },\n  methods: {\n    // 添加属性\n    addProperty() {\n      let add = true\n      let dont_add = false\n      let person1 = {\n          id:1,\n          name: 'pop jod',\n          ...( add && { age: 16 } ),\n          ...( dont_add && { height: \"187\" })\n      }\n      console.log(person1) \n    },\n    // 检查属性是否存在对象中\n    propertyExist() {\n      let person = {\n        name: '阿斯顿',\n        age:12\n      }\n      console.log('age' in person)  // true\n      console.log('another' in person)    // false\n    },\n    // 设置对象中的动态属性\n    dynamicProperty() {\n      let namekey = 'name'\n      let item = {\n          age: 12,\n          [namekey]: 'key name'\n      }\n      console.log(item) // {age: 12, name: 'key name'}\n      // 也可以动态健引用对象属性\n      let keyage = 'age'\n      console.log(item[keyage]) // 12\n    },\n    // 使用动态键进行对象解构\n    dynamicKey() {\n      // 静态解构\n      let person = {\n          name:'pop',\n          age: 12\n      }\n      let { name: personName } = person\n      console.log(personName) // pop\n\n      // 动态解构\n      let template = {\n          'come': 'come here',\n          'go': 'go another'\n      }\n      let comeName = 'come'\n      let { [comeName]: templateCome } = template\n      console.log(templateCome) // come here\n    },\n    // 空值合并操作符\n    nullMergeOperator() {\n      // 当我们想检查一个变量是否为 null 或 undefined 时，??操作符很有用\n      let bobo = null ?? 'Hello'\n      console.log(bobo) // Hello\n\n      let item = 'has item' ?? 'Hello'\n      console.log(item)   // has item\n\n      // 和 || 的区别是 0， ?? 只判断是否是null和undefined\n      let canBeZero = 0 ?? 5;\n      let canBeZero1 = 0 || 5;\n      console.log(canBeZero); // 0\n      console.log(canBeZero1); // 5\n    },\n    // 可选链?.\n    optionalChain() {\n      // 我们是不是经常遇到这样的错误： TypeError: Cannot read property ‘foo’ of null。这对每一个毅开发人员来说都是一个烦人的问题。引入可选链就是为了解决这个问题。一起来看看\n      let book = {\n          id: 1,\n          title: 'title',\n          author: null\n      }\n      // console.log(book.author.age) // throw error 通常解决办法\n      console.log(book.author && book.author.age) // null\n\n      // 使用可选链\n      console.log(book.author?.age) // undefined\n      // 深度可选链\n      console.log(book.author?.address?.city); // undefined\n\n      // 也可以使用函数可选链\n      let newBook = {\n          id: 1,\n          title: 'title',\n          author: null,\n          open(){\n              console.log('打开书本')\n          }\n      }\n      // console.log(newBook.openBook()) // throw error\n      console.log(newBook.openBook?.()) //undefined\n    },\n    // 使用 !! 操作符（双重否定表肯定）\n    doubleDenial() {\n      let _boolean = 'Hello world'\n      console.log(!!_boolean) // true\n\n      let __boolean = ''\n      console.log(!!__boolean) // false\n    },\n    // 字符串和整数转换\n    strAndIntegerConverdsion() {\n      // 使用 + 操作符将字符串快速转换为数字:\n      let stringNum = '123'\n\n      console.log(+stringNum)  // 123\n      console.log(typeof +stringNum)  // Number\n\n      // 要将数字快速转换为字符串，也可以使用 + 操作符，后面跟着一个空字符串:\n      let _string = 25 + ''\n      console.log(_string) // '25'\n      console.log(typeof _string) // String\n    },\n    // 检查数组中的假值\n    checkFackValue() {\n      // 大家应该都用过数组方法：filter、some、every，这些方法可以配合 Boolean 方法来测试真假值。\n      let Arr = [null, false, 'Hello', undefined, 0]\n      // 过滤假值\n      let filtered = Arr.filter(Boolean)\n      console.log(filtered) // ['Hello']\n\n      // 检查至少一个值是否为真\n      let _Arr = Arr.some(Boolean)\n      console.log(_Arr) // true\n\n      // 检查所有的值是否为真\n      let __Arr = Arr.every(Boolean)\n      console.log(__Arr) // false\n\n      // 下面是工作原理\n      Arr.filter(val => Boolean(val));\n      Arr.filter(Boolean);\n      \n      let a = null\n      console.log(Boolean(a)) // false\n    },\n    // 数组扁平化\n    flattenArrays() {\n      // 在原型 Array 上有一个方法 flat，可以从一个数组的数组中制作一个单一的数组\n      let arr = [{ id: 1 }, [{ id: 2 }], [{ id: 3 }]]\n      let newArr = arr.flat() \n      console.log(newArr) // [ { id: 1 }, { id: 2 }, { id: 3 } ]\n\n      // 如果是深度级别的，指定一个嵌套的数组解构应该扁平化的深度\n      let arr1 = [0, 1, 2, [[[3, 4]]]];\n      console.log(arr1.flat(2)); // [0, 1, 2, [3,4]]\n      console.log(arr1.flat(3)); // [0, 1, 2, 3, 4]\n    },\n    // if(a==1且a==2且a==3)，有没有可能为true\n    Question_1() {\n      let a = {\n        i: 1,\n        valueOf() {\n          if(this.i === 1){\n            this.i++;\n            return 1;\n          }else{\n            return 12;\n          }\n        }\n      }\n      if( a == 1 && a == 12 ) {\n        console.log(\"打印出a:\",a)\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.tips_page{\n  .tips_title{\n    color: #ccc;\n    margin-bottom: 15px;\n  }\n  .btn_box {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n  }\n  .el-button {\n    margin-bottom: 15px;\n    color: #ccc;\n  }\n}\n</style>"]}]}