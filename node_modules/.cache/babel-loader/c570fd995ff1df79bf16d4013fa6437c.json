{"remainingRequest":"/Users/wendy/Documents/test_proj/oneTip/onetip/node_modules/babel-loader/lib/index.js!/Users/wendy/Documents/test_proj/oneTip/onetip/src/mock/mock.js","dependencies":[{"path":"/Users/wendy/Documents/test_proj/oneTip/onetip/src/mock/mock.js","mtime":1636962350519},{"path":"/Users/wendy/Documents/test_proj/oneTip/onetip/babel.config.js","mtime":1636363647938},{"path":"/Users/wendy/Documents/test_proj/oneTip/onetip/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wendy/Documents/test_proj/oneTip/onetip/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IE1vY2sgZnJvbSAnbW9ja2pzJzsKaW1wb3J0IHN0cm9lIGZyb20gJy4uL3N0b3JlJzsgLy8g5rOo5YaM5o6l5Y+jCgp2YXIgcmVnaXN0ZXJTYXZlID0gTW9jay5tb2NrKCcvYXBpL3JlZ2VzdGVyJywgJ2dldCcsIGZ1bmN0aW9uIChvcHRpb25zKSB7CiAgLy/mnInlj4IKICByZXR1cm4gW3sKICAgICJkZXNjcmlwdGlvbiI6ICLmqKHmi5/kuIDkuKrluKblj4LmlbDnmoRnZXTor7fmsYIiLAogICAgInJlcXVlc3QiOiB7CiAgICAgICJ1cmkiOiAiL2dldHdpdGhwYXJhbSIsCiAgICAgICJtZXRob2QiOiAiZ2V0IiwKICAgICAgInF1ZXJpZXMiOiBvcHRpb25zCiAgICB9LAogICAgInJlc3BvbnNlIjogewogICAgICAidGV4dCI6ICLmiJHog6HmsYnkuInlj4jlm57mnaXllaYiLAogICAgICAiaGVhZGVycyI6IHsKICAgICAgICAiQ29udGVudC1UeXBlIjogInRleHQvaHRtbDtjaGFyc2V0PWdiayIKICAgICAgfQogICAgfQogIH1dOyAvLyBsZXQgZGF0YSA9IHsKICAvLyAgIGJvZHk6IHsKICAvLyAgICAgbWVzc2FnZSA6ICJvayIgLAogIC8vICAgICByZXE6IG9wdGlvbnMKICAvLyAgIH0sCiAgLy8gICBtZXRhOiB7CiAgLy8gICAgIGNvZGU6IDIwMCwKICAvLyAgICAgbWVzc2FnZTogIueZu+W9leaIkOWKnyIKICAvLyAgIH0KICAvLyB9CiAgLy8gcmV0dXJuIGRhdGEKfSk7IC8vIOiOt+WPluWbvueJh+aOpeWPowoKdmFyIGdldExpc3QgPSBNb2NrLm1vY2soJy9hcGkvZ2V0TGlzdCcsICdnZXQnLCBmdW5jdGlvbiAob3B0aW9ucykgewogIHZhciBsaXN0SW1nID0gW3sKICAgIGlkOiAxLAogICAgdXJsOiAnaHR0cDovL3kuZ3RpbWcuY24vbXVzaWMvY29tbW9uL3VwbG9hZC9NVVNJQ19GT0NVUy8yOTAwNzcuanBnJwogIH0sIHsKICAgIGlkOiAyLAogICAgdXJsOiAnaHR0cDovL3kuZ3RpbWcuY24vbXVzaWMvY29tbW9uL3VwbG9hZC9NVVNJQ19GT0NVUy8yODk0MTYuanBlZycKICB9LCB7CiAgICBpZDogMywKICAgIHVybDogJ2h0dHA6Ly95Lmd0aW1nLmNuL211c2ljL2NvbW1vbi91cGxvYWQvTVVTSUNfRk9DVVMvMjkwMjU2LmpwZycKICB9XTsKICB2YXIgZGF0YSA9IHsKICAgIGJvZHk6IHsKICAgICAgbGlzdEltZzogbGlzdEltZwogICAgfSwKICAgIG1ldGE6IHsKICAgICAgY29kZTogMjAwLAogICAgICBtZXNzYWdlOiAn6I635Y+W5oiQ5YqfJwogICAgfQogIH07CiAgcmV0dXJuIGRhdGE7Cn0pOwpleHBvcnQgZGVmYXVsdCB7CiAgZ2V0TGlzdDogZ2V0TGlzdCwKICByZWdpc3RlclNhdmU6IHJlZ2lzdGVyU2F2ZQp9Ow=="},{"version":3,"sources":["/Users/wendy/Documents/test_proj/oneTip/onetip/src/mock/mock.js"],"names":["Mock","stroe","registerSave","mock","options","getList","listImg","id","url","data","body","meta","code","message"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,KAAP,MAAkB,UAAlB,C,CAEA;;AACA,IAAMC,YAAY,GAAGF,IAAI,CAACG,IAAL,CAAU,eAAV,EAA2B,KAA3B,EAAmC,UAACC,OAAD,EAAa;AACnE;AACA,SAAO,CACL;AAEI,mBAAc,eAFlB;AAGI,eAAU;AACN,aAAM,eADA;AAEN,gBAAS,KAFH;AAGN,iBAAUA;AAHJ,KAHd;AAQI,gBAAW;AACP,cAAQ,UADD;AAEP,iBAAW;AACP,wBAAe;AADR;AAFJ;AARf,GADK,CAAP,CAFmE,CAmBnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CA9BoB,CAArB,C,CAgCA;;AACA,IAAMC,OAAO,GAAGL,IAAI,CAACG,IAAL,CAAU,cAAV,EAA0B,KAA1B,EAAiC,UAACC,OAAD,EAAa;AAC5D,MAAIE,OAAO,GAAG,CACZ;AACEC,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,GAAG,EAAE;AAFP,GADY,EAIT;AACDD,IAAAA,EAAE,EAAE,CADH;AAEDC,IAAAA,GAAG,EAAE;AAFJ,GAJS,EAOT;AACDD,IAAAA,EAAE,EAAE,CADH;AAEDC,IAAAA,GAAG,EAAE;AAFJ,GAPS,CAAd;AAYA,MAAIC,IAAI,GAAG;AACTC,IAAAA,IAAI,EAAE;AACJJ,MAAAA,OAAO,EAAEA;AADL,KADG;AAITK,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAE,GADF;AAEJC,MAAAA,OAAO,EAAE;AAFL;AAJG,GAAX;AASA,SAAOJ,IAAP;AACD,CAvBe,CAAhB;AAyBA,eAAe;AACbJ,EAAAA,OAAO,EAAPA,OADa;AAEbH,EAAAA,YAAY,EAAZA;AAFa,CAAf","sourcesContent":["import Mock from 'mockjs'\nimport stroe from '../store'\n\n// 注册接口\nconst registerSave = Mock.mock('/api/regester', 'get' , (options) => {\n  //有参\n  return [\n    {\n\n        \"description\":\"模拟一个带参数的get请求\",\n        \"request\":{\n            \"uri\":\"/getwithparam\",\n            \"method\":\"get\",\n            \"queries\":options\n        },\n        \"response\":{\n            \"text\": \"我胡汉三又回来啦\",\n            \"headers\": {\n                \"Content-Type\":\"text/html;charset=gbk\"\n            }\n        }\n    }\n  ]\n  // let data = {\n  //   body: {\n  //     message : \"ok\" ,\n  //     req: options\n  //   },\n  //   meta: {\n  //     code: 200,\n  //     message: \"登录成功\"\n  //   }\n  // }\n  // return data\n})\n\n// 获取图片接口\nconst getList = Mock.mock('/api/getList', 'get', (options) => {\n  let listImg = [\n    { \n      id: 1,\n      url: 'http://y.gtimg.cn/music/common/upload/MUSIC_FOCUS/290077.jpg'\n    }, {\n      id: 2,\n      url: 'http://y.gtimg.cn/music/common/upload/MUSIC_FOCUS/289416.jpeg'\n    }, {\n      id: 3,\n      url: 'http://y.gtimg.cn/music/common/upload/MUSIC_FOCUS/290256.jpg'\n    }\n  ]\n  let data = {\n    body: {\n      listImg: listImg\n    },\n    meta: {\n      code: 200,\n      message: '获取成功'\n    }\n  }\n  return data\n})\n\nexport default {\n  getList,\n  registerSave\n}\n"]}]}